"use strict";

/**
 * Generated by Verge3D Puzzles v.2.4.0
 * Sat Jun 02 2018 22:47:44 GMT+0200 (CEST)
 * Do not edit this file.
 */

(function() {

// global variables used by blocks' functions
var _pVars = {};
_pVars.objClickCallbacks = [];
_pVars.pickedObject = "";
_pVars.objHoverCallbacks = [];
_pVars.hoveredObject = "";
_pVars.mediaElements = {};
_pVars.animMixerCallbacks = [];
_pVars.vec3Tmp = new v3d.Vector3();
_pVars.vec3Tmp2 = new v3d.Vector3();

var PL = v3d.PL = v3d.PL || {};

PL.legacyMode = false;

PL.init = function(appInstance) {

var semiAnimationStart, clioAnimationStart, camionBenneAnimationStart, benneAnimStartFrame;

// utility function envoked by almost all V3D-specific blocks
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
   if (!objNames)
       return;
   if (typeof objNames == "string")
       objNames = [objNames];
   else if (Array.isArray(objNames) && objNames[0] == "GROUP")
       objNames = getObjectNamesByGroupName(objNames[1]);
   else if (Array.isArray(objNames) && objNames[0] == "ALL_OBJECTS")
       objNames = getAllObjectNames();
   return objNames;
}

// utility function envoked by almost all V3D-specific blocks
// find first occurence of the object by its name
var objCache = {};
function getObjectByName(objName) {
   var objFound;
   objFound = objCache[objName];
   if (objFound && objFound.name == objName)
       return objFound;
   appInstance.scene.traverse(function(obj) {
       if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
           objFound = obj;
           objCache[objName] = objFound;
       }
   });
   return objFound;
}

// utility function envoked by almost all V3D-specific blocks
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
   var objNameList = [];
   appInstance.scene.traverse(function(obj){
       if (notIgnoredObj(obj)) {
           var groupNames = obj.groupNames;
           if (!groupNames)
               return;
           for (var i = 0; i < groupNames.length; i++) {
               var groupName = groupNames[i];
               if (groupName == targetGroupName) {
                   objNameList.push(obj.name);
               }
           }
       }
   });
   return objNameList;
}

// utility function envoked by almost all V3D-specific blocks
// retrieve all objects on the scene
function getAllObjectNames() {
   var objNameList = [];
   appInstance.scene.traverse(function(obj){
       if (notIgnoredObj(obj))
           objNameList.push(obj.name)
   });
   return objNameList;
}

// utility function envoked by almost all V3D-specific blocks
// filter off some non-mesh types
function notIgnoredObj(obj) {
   return (obj.type != "Scene" &&
           obj.type != "AmbientLight" &&
           obj.name != "" &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh));
}

// tweenCamera block
function tweenCamera(posObjName, targetObjName, duration) {
   if (!targetObjName)
       return;
   if (posObjName)
       var posObj = getObjectByName(posObjName);
   else
       var posObj = appInstance.camera;
   var targetObj = getObjectByName(targetObjName);
   if (!posObj || !targetObj)
       return;
   if (appInstance.controls && appInstance.controls.tween) { // orbit camera
       if (!appInstance.controls.inTween)
           appInstance.controls.tween(posObj.position, targetObj.position, duration);
   } else { // TODO flying and static camera, just position it for now
       appInstance.camera.position.copy(posObj.position);
       appInstance.camera.lookAt(targetObj.position);
   }
}

// callJSFunction block
function getJSFunction(funcName) {
   var jsFunc = appInstance.ExternalInterface[funcName];
   if (typeof jsFunc == "function")
       return jsFunc;
   else
       return function() {};
}

// setTimeout block
function registerTimeout(timeout, callback) {
   window.setTimeout(callback, 1000 * timeout);
}

// utility function envoked by the HTML puzzles
function getElement(id, isParent) {
   var elem;
   if (Array.isArray(id) && id[0] == "DOCUMENT") {
       if (isParent)
           elem = parent.document;
       else
           elem = document;
   } else if (Array.isArray(id) && id[0] == "BODY") {
       if (isParent)
           elem = parent.document.body;
       else
           elem = document.body;
   } else {
       if (isParent)
           elem = parent.document.getElementById(id);
       else
           elem = document.getElementById(id);
   }
   return elem;
}

function operateLineObjectHTML(objName, id, isParent) {
   if (!objName)
       return;
   var elem = getElement(id, isParent);
   if (!elem)
       return;
   var obj = getObjectByName(objName);
   if (!obj)
       return;
   var projected = new v3d.Vector3();
   elem.style.top = 0;
   elem.style.left = 0;
   appInstance.renderCallbacks.push(function() {
       obj.getWorldPosition(projected).project(appInstance.camera);
       projected.x = (0.5 + projected.x / 2) * appInstance.container.offsetWidth;
       projected.y = (0.5 - projected.y / 2) * appInstance.container.offsetHeight;
       elem.style.transform = "translate(" + projected.x + "px, " + projected.y + "px)";
   });
}

function eventHTMLElem(eventType, id, isParent, callback) {
   var elem = getElement(id, isParent);
   if (elem)
       elem.addEventListener(eventType, callback, false);
}

function setHTMLElemStyle(prop, value, id, isParent) {
   var elem = getElement(id, isParent);
   if (elem && elem.style)
       elem.style[prop] = value;
}

// getAnimations block
function getAnimations(objNames) {
   objNames = retrieveObjectNames(objNames);
   if (!objNames)
       return;
   var animations = [];
   for (var i = 0; i < objNames.length; i++) {
       var objName = objNames[i]
       if (!objName)
           continue;
       // use objName as animName - for now we have one-to-one match
       var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
       if (action)
           animations.push(objName);
   }
   return animations;
}

function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}

// playAnimation, playAnimationExt and stopAnimation blocks
(function() {
   appInstance.mixer.addEventListener("finished", function(e) {
       var cb = _pVars.animMixerCallbacks;
       var found = [];
       for (var i = 0; i < cb.length; i++) {
           if (cb[i][0] == e.action) {
               cb[i][0] = null; // desactivate
               found.push(cb[i][1]);
           }
       }
       for (var i = 0; i < found.length; i++) {
           found[i]();
       }
   });
})();

// playAnimation, playAnimationExt and stopAnimation blocks
function operateAnimation(operation, animations, from, to, loop, timeScale, callback) {
   if (!animations) return;
   // input can be either single obj or array of objects
   if (typeof animations == "string") animations = [animations];
   for (var i = 0; i < animations.length; i++) {
       var animName = animations[i];
       if (!animName) continue;
       var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
       if (!action) continue;
       switch (operation) {
       case "PLAY":
           if (!action.isRunning()) {
               action.reset();
               if (loop && (loop != "AUTO"))
                   action.loop = v3d[loop];
               var scene = getSceneByAction(action);
               var frameRate = getSceneAnimFrameRate(scene);
               if (timeScale == 1) {
                   action.timeScale = Math.abs(action.timeScale);
                   action.time = from ? from/frameRate : 0;
                   if (to)
                       action.getClip().duration = to/frameRate;
               } else {
                   action.timeScale = -Math.abs(action.timeScale);
                   action.time = to ? to/frameRate : action.getClip().duration;
               }
               // action.time outside of the clip bounds can prevent the action from playing
               action.time = v3d.Math.clamp(action.time, 0, action.getClip().duration);
               action.paused = false;
               action.play();
               _pVars.animMixerCallbacks.push([action, callback]);
           }
           break;
       case "STOP":
           action.stop();
           break;
       case "PAUSE":
           action.paused = true;
           break;
       case "RESUME":
           action.paused = false;
           break;
       }
   }
}


tweenCamera("CAMERA-start", "ANCHOR-start", 3);
registerTimeout(2, function() {
  getJSFunction('setHudMode')('help');
});
operateLineObjectHTML("ANCHOR-quai", 'popup-quai', false);
operateLineObjectHTML("ANCHOR-parking_vl", 'popup-parking-vl', false);
operateLineObjectHTML("ANCHOR-zone_dechets", 'popup-zone-dechets', false);

eventHTMLElem('click', 'vue-quai', false, function(event) {
  tweenCamera("CAMERA-quai", "ANCHOR-quai", 3);
});

eventHTMLElem('click', 'vue-zone-dechets', false, function(event) {
  tweenCamera("CAMERA-zonedechets", "ANCHOR-zone_dechets", 3);
});

eventHTMLElem('click', 'vue-parking-vl', false, function(event) {
  tweenCamera("CAMERA-parkingvl", "ANCHOR-parking_vl", 3);
});

semiAnimationStart = true;

eventHTMLElem('click', 'anim-quai', false, function(event) {
  setHTMLElemStyle('display', 'none', 'popups', false);
  if (semiAnimationStart) {
    operateAnimation("PLAY", getAnimations(["GROUP", "Group-semi-remorque"]), 0, 784, 'AUTO', 1, function() {
      semiAnimationStart = false;
      setHTMLElemStyle('display', 'block', 'popups', false);
    });
  } else {
    operateAnimation("PLAY", getAnimations(["GROUP", "Group-semi-remorque"]), 785, 1505, 'AUTO', 1, function() {
      semiAnimationStart = true;
      setHTMLElemStyle('display', 'block', 'popups', false);
    });
  }
});

clioAnimationStart = true;

eventHTMLElem('click', 'anim-parking-vl', false, function(event) {
  setHTMLElemStyle('display', 'none', 'popups', false);
  if (clioAnimationStart) {
    operateAnimation("PLAY", getAnimations(["GROUP", "Group-clio"]), 0, 729, 'AUTO', 1, function() {
      clioAnimationStart = false;
      setHTMLElemStyle('display', 'block', 'popups', false);
    });
  } else {
    operateAnimation("PLAY", getAnimations(["GROUP", "Group-clio"]), 775, 1205, 'AUTO', 1, function() {
      clioAnimationStart = true;
      setHTMLElemStyle('display', 'block', 'popups', false);
    });
  }
});

camionBenneAnimationStart = true;
benneAnimStartFrame = 19;

eventHTMLElem('click', 'anim-zone-dechets', false, function(event) {
  setHTMLElemStyle('display', 'none', 'popups', false);
  if (camionBenneAnimationStart) {
    operateAnimation("PLAY", getAnimations(["GROUP", "Group-camion.benne"]), benneAnimStartFrame, 1842, 'AUTO', 1, function() {
      benneAnimStartFrame = 1;
      camionBenneAnimationStart = false;
      setHTMLElemStyle('display', 'block', 'popups', false);
    });
  } else {
    operateAnimation("PLAY", getAnimations(["GROUP", "Group-camion.benne"]), 1843, 2255, 'AUTO', 1, function() {
      camionBenneAnimationStart = true;
      setHTMLElemStyle('display', 'block', 'popups', false);
    });
  }
});

}

if (window.v3dApp) {
   // backwards compatibility for old player projects
   PL.legacyMode = true;
   PL.init(window.v3dApp);
}

})();

/* ================== end of code ================== */